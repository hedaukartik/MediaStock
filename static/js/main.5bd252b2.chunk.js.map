{"version":3,"sources":["component/Header.js","component/ListView.js","component/StockHome.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","ListView","props","getStockValueColor","stock","current_value","history","slice","value","Fragment","Table","bordered","Object","keys","stocks","map","current_stock","console","log","key","toFixed","date","time","StockHome","connectionEstabished","event","handleUpdateMessage","stockData","JSON","parse","data","new_stocks","state","push","Date","now","Number","setState","connectedClosed","wasClean","alert","code","reason","errorOccured","error","message","this","socket","WebSocket","onopen","onmessage","onclose","onerror","Container","Row","Col","lg","sm","xs","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.5bd252b2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"app-header\">\r\n            <div className=\"app-branding\">\r\n                <h2 className=\"app-title\">Stock App</h2>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react'\r\nimport { Table } from 'reactstrap';\r\nimport TimeAgo from 'react-timeago';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\n\r\nexport function ListView(props) {\r\n\r\n    const getStockValueColor = (stock) => {\r\n        if (stock.current_value < stock.history.slice(-2)[0].value) {\r\n            return 'bg-red';\r\n        }\r\n        else if (stock.current_value > stock.history.slice(-2)[0].value) {\r\n            return 'bg-green';\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div>\r\n                <Table bordered className=\"text-center\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Stock</th>\r\n                            <th>Current Price</th>\r\n                            <th>Last Updated</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            Object.keys(props.stocks).map((stock) => {\r\n                                const current_stock = props.stocks[stock];\r\n                                console.log(\"current_stock\", current_stock);\r\n                                return (\r\n                                    <tr key={stock}>\r\n                                        <td>{stock}</td>\r\n                                        <td className={getStockValueColor(current_stock)}>\r\n                                            {current_stock.current_value.toFixed(2)}\r\n                                        </td>\r\n                                        <td className='updated_at'>\r\n                                            <TimeAgo date={current_stock.history.slice(-1)[0].time} />\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            }\r\n                            )\r\n                        }\r\n\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        </React.Fragment>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default ListView;","import React, { Component } from 'react';\r\nimport ListView from \"../component/ListView\";\r\nimport { Container, Row, Col } from 'reactstrap';\r\n\r\n\r\n\r\nconst socketUrl = 'ws://stocks.mnet.website/';\r\n\r\nclass StockHome extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            stocks: {}\r\n        }\r\n\r\n    }\r\n    componentDidMount() {\r\n\r\n        this.socket = new WebSocket(socketUrl);\r\n        this.socket.onopen = this.connectionEstabished;\r\n        this.socket.onmessage = this.handleUpdateMessage;\r\n        this.socket.onclose = this.connectedClosed;\r\n        this.socket.onerror = this.errorOccured;\r\n\r\n    }\r\n\r\n    connectionEstabished = (event) => {\r\n        console.log(\"Connected Established\");\r\n    }\r\n\r\n    handleUpdateMessage = (event) => {\r\n        const stockData = JSON.parse(event.data);\r\n        console.log(stockData);\r\n        const new_stocks = this.state.stocks\r\n\r\n        stockData.map((stock) => {\r\n            console.log(stock);\r\n            if (this.state.stocks[stock[0]]) {\r\n\r\n                new_stocks[stock[0]].current_value = stock[1];\r\n                new_stocks[stock[0]].history.push({ time: Date.now(), value: stock[1] });\r\n            }\r\n            else {\r\n                new_stocks[stock[0]] = { current_value: stock[1], history: [{ time: Date.now(), value: Number(stock[1]) }] };\r\n            }\r\n        });\r\n\r\n        this.setState({ stocks: new_stocks })\r\n        console.log(this.state.stocks);\r\n    }\r\n\r\n    connectedClosed = (event) => {\r\n        if (event.wasClean) {\r\n            alert(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`);\r\n        } else {\r\n            // e.g. server process killed or network down\r\n            // event.code is usually 1006 in this case\r\n            alert('[close] Connection died');\r\n        }\r\n    }\r\n\r\n    errorOccured = (error) => {\r\n        alert(`[error] ${error.message}`);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"stockHomeSection\">\r\n                <Container>\r\n                    <Row>\r\n                        <Col lg=\"7\" sm=\"7\" xs=\"12\">\r\n                            <ListView\r\n                                stocks={this.state.stocks}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default StockHome;","import React from 'react';\r\nimport './App.css';\r\nimport Header from \"../src/component/Header\";\r\nimport StockHome from \"../src/component/StockHome\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <StockHome />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}